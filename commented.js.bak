// const renderSeries = (seasons) => {
//   var series = [];
//   seasons.map((item) => (
//     series.push(
//       renderSeason(item)
//     )
//   ))
//   return (
//     <View>
//       { series }
//     </View>
//   )
// }

// const RandomSeriesEpisode = (seasons) => {
//   const [episode, setEpisode] = React.useState({});

//   const getRandomEpisode = (seasons) => {
//     const randomSeason = randomIntFromInterval(0, seasons.length - 1);
//     let season = seasons[randomSeason];
//     let episodes = season.results;
//     const randomEpisode = randomIntFromInterval(1, episodes.length - 1);
//     let episode = episodes[randomEpisode];
//     setEpisode(episode);
//   }

//   return(
//     <View style={{ backgroundColor: "#ffffff", padding: 16, marginVertical: 16, borderRadius: 8, }}>
//       <View style={{ flex: 1, flexDirection: "row", alignItems: "center", }}>
//         <View style={{ width: "90%", }}>
//           <Text style={{ fontSize: 34, fontWeight: "bold", }}>Random</Text>
//         </View>
//         <View style={{ width: "10%", }}>
//           <Pressable onPress={() => getRandomEpisode(seasons.seasons)}>
//             <Ionicons name="reload" size={24} color="#3C3C43" />
//           </Pressable>
//         </View>
//       </View>
//       {episode && Object.keys(episode).length !== 0 && Object.getPrototypeOf(episode) === Object.prototype &&
//         <View style={{ marginTop: 16, }}>
//           <EpisodeCard episode={episode} />
//         </View>
//       }
//     </View>
//   );

// }

// const SeasonHeader = ({ width, episode }) => (
//   <View>
//     <Text style={{ fontSize: 13, color: "#3C3C43", }}>Released {getYear(episode.releaseDate)}</Text>
//     <Text style={{ fontSize: 34, fontWeight: "bold", }}>{getSeriesSeason(episode.collectionName, episode.artistName)}</Text>
//     {/* <RenderHtml contentWidth={width} source={{ html: episode.longDescription }} /> */}
//   </View>
// );

// const WebBrowserButton = ({ webUrl }) => {
//   const [result, setResult] = React.useState(null);
//   const _handlePressButtonAsync = async () => {
//     let result = await WebBrowser.openBrowserAsync(webUrl, { dismissButtonStyle: 'close', controlsColor: '#000000' });
//     setResult(result);
//   };

//   return(
//     <Pressable onPress={_handlePressButtonAsync}>
//       <Ionicons name="play" size={24} color="#3C3C43" />
//     </Pressable>
//   );
// }

// const EpisodeCard = ({ episode }) => {
//   const video = React.useRef(null);
//   const [status, setStatus] = React.useState({});
//   const webUrl = `https://google.com/search?q=${encodeURIComponent(episode.artistName + ' ' + episode.trackName)}`;
//   React.useEffect(() => video.current.playFromPositionAsync(0), [episode]);

//   return(
//     <View>
//       <View style={{ flexDirection: "row", alignItems: "center", }}>
//         <View style={{ flex: 1, }}>
//           <Text style={{ fontSize: 13, color: "#3C3C43", }}>{getSeriesSeason(episode.collectionName, episode.artistName)}</Text>
//           <Text style={{ fontSize: 17, fontWeight: "bold", marginBottom: 1, }}>{ episode.trackNumber }. { episode.trackName }</Text>
//           <Text style={{ fontSize: 17, marginBottom: 16, }}>{ episode.longDescription }</Text>
//         </View>
//         <View style={{ padding: 8, }}>
//           <WebBrowserButton webUrl={webUrl} />
//         </View>
//       </View>
//       <Video
//         ref={video}
//         style={{ width: "100%", aspectRatio: 1.3 / 1, marginTop: 8, marginBottom: 8, borderRadius: 8, }}
//         source={{
//           uri: episode.previewUrl,
//         }}
//         useNativeControls
//         resizeMode="contain"
//         isLooping="false"
//         onPlaybackStatusUpdate={status => setStatus(() => status)}
//       />
//     </View>
//   );
// }

// const EpisodeItem = ({ episode }) => {
//   const webUrl = `https://google.com/search?q=${encodeURIComponent(episode.artistName + ' ' + episode.trackName)}`;
//   return(
//     <View style={{ flexDirection: "row", alignItems: "center", marginVertical: 18, }}>
//       <View style={{ flex: 1, }}>
//         <Text style={{ fontSize: 17, fontWeight: "bold", marginBottom: 1, }}>{ episode.trackNumber }. { episode.trackName }</Text>
//         <Text style={{ fontSize: 17, }}>{ episode.shortDescription }...</Text>
//       </View>
//       <View style={{ padding: 8, }}>
//         <WebBrowserButton webUrl={webUrl} />
//       </View>
//     </View>
//   )
// }

// function EpisodesScreen(props) { 
//   const ref = React.useRef(null);
//   useScrollToTop(ref);
//   return (
//     <SafeAreaView style={styles.container}>
//       <ScrollView style={styles.scrollView} ref={ref}>
//         <RandomSeriesEpisode seasons={props.show.seasons} />
//         <View key={props.show.code}>{ renderSeries(props.show.seasons) }</View>
//         <StatusBar style="auto" />
//       </ScrollView>
//     </SafeAreaView>
//   );
// }

      {/* <SectionList
        sections={tvshow}
        keyExtractor={(item, index) => item + index}
        renderItem={({ item, index }) => (
          <Pressable key={index} onPress={() => navigation.navigate('Episode', { title: item.trackName, episode: item })}>
            <EpisodeItem episode={item} />
          </Pressable>
        )}
        renderSectionHeader={({ section: { season } }) => <SeasonCard season={season} />}
      /> */}

//  function DetailsScreen({ route, navigation }) {
//   const sectionListRef = React.useRef(null);
//   const [selectedSection, setSelectedSection] = React.useState(0);
//   React.useEffect(() => {
//     sectionListRef.current.scrollToLocation({ animated: false, sectionIndex: selectedSection, itemIndex: 1 });
//   }, [selectedSection]);

//   const { series } = route.params;
//   const tvshow = formatSeriesData(series);

//   const moveToSection = (index, sectionListRef) => {
//     console.log("moveToSection", index);
//     setSelectedSection(index);    
//   }

//   return (
//     <SafeAreaView style={{ flex: 1, paddingTop: StatusBar.currentHeight, marginHorizontal: 16 }}>
//       <View style={{ flexDirection: "row", alignItems: "center", marginVertical: 18, }}>
//         <Button title="1" onPress={() => moveToSection(0, sectionListRef)} />
//         <Button title="2" onPress={() => moveToSection(1, sectionListRef)} />
//         <Button title="3" onPress={() => moveToSection(2, sectionListRef)} />
//         <Button title="4" onPress={() => moveToSection(3, sectionListRef)} />
//         <Button title="5" onPress={() => moveToSection(4, sectionListRef)} />
//         <Button title="6" onPress={() => moveToSection(5, sectionListRef)} />
//         <Button title="7" onPress={() => moveToSection(6, sectionListRef)} />
//       </View>
//       <SectionList
//         ref={sectionListRef}
//         sections={tvshow}
//         keyExtractor={(item, index) => item + index}
//         renderItem={({ item }) => <EpisodeItem episode={item} />}
//         renderSectionHeader={({ section: { season } }) => <SeasonHeader season={season} />}
//         onScrollToIndexFailed={(error) => {
//           const offset = error.averageItemLength * error.index;
//           console.log("error", error);
//           console.log("offset", offset);
//           console.log("selectedSection", selectedSection);
//           setTimeout(() => sectionListRef.current.scrollToLocation({ animated: false, sectionIndex: 0, itemIndex: error.highestMeasuredFrameIndex }), 100)
//           setTimeout(() => sectionListRef.current.scrollToLocation({ animated: false, sectionIndex: selectedSection, itemIndex: 0 }), 100)
//         }}
//       />
//     </SafeAreaView>
//   );
// }

// const renderSeason = (season) => (
//   <View key={randomIntFromInterval(1, 1000)} style={{ backgroundColor: "#ffffff", padding: 16, marginVertical: 8, borderRadius: 8, }}>
//     { listSeason(season) }
//   </View>
// )

// const listSeason = (season) => {
//   const { width } = useWindowDimensions();
//   return (
//     season.results.map((item, index) => (
//       <View key={index}>
//         {(() => {
//           if (index == 0){
//             return <SeasonHeader width={width} episode={item} />
//           }
//           return <EpisodeItem episode={item} />
//         })()}
//       </View>
//     ))
//   );
// }

